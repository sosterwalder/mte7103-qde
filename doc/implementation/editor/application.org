The main class of a Qt application using a graphical user interface (GUI)
is provided by the class =QApplication=. According to
[fn:7:http://doc.qt.io/Qt-5/qapplication.html] the class may be initialized and
used directly without sub-classing it. It may however be useful to sub-class it
nevertheless as this provides higher flexibility. Therefore the class
=Application= is introduced, which sub-classes the =QApplication= class.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Creation and initialization of the =application= name-space.
#+BEGIN_SRC python :tangle ../src/qde/editor/application/__init__.py :noweb tangle :mkdirp yes
#+END_SRC

At this point it is necessary to think about the functionality of the class
=Application= itself. Very roughly sketched, such a type of application
initializes resources, enters a main loop where it stays until told to shut
down. At the end it frees resources again.

Due to the usage of =QApplication= as super class it is not necessary to
implement a main (event-) loop, as such is provided by Qt itself
[fn:8:http://doc.qt.io/Qt-5/qapplication.html#exec].

Concerning the initialization of
resources[fn:12:https://www.python.org/dev/peps/pep-0263/], the application has
to act as central node between the various layers of the architecture,
initializing them and connecting them using signals.\cite[S. 37 bis 38]{osterwalder_qde_2016}

Before going into too much details about the actual =Application= class, let us
first have a look at the structure of a Python module. Each (proper) Python
module contains an (optional) file encoding, a
docstring[fn:9:https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring],
imports of other modules and either loose methods or a class definition with
methods underneath.

The main module =application= containing also the =Application= class, looks
therefore as follows.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Main application module holding the =Application= class.
#+BEGIN_SRC python :tangle ../src/qde/editor/application/application.py :noweb tangle :mkdirp yes
#!/usr/bin/python
# -*- coding: utf-8 -*-

"""Main application module for QDE."""

<<app-application-imports>>

<<app-application-class-definition>>
#+END_SRC

#+RESULTS:

**** Imports
As you can see, the imports of the module are defined by =<<app-application-imports>>=. For
achieving better readability, the imports are split up into system imports,
meaning modules provided by the Python library itself or external modules, and
project imports, modules created within the project. The imports are therefore
split up as follows.

#+NAME: app-application-imports
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<app-application-imports>>=, definition of the application modules' imports.
#+BEGIN_SRC python
# System imports
<<app-application-system-imports>>

# Project imports
<<app-application-project-imports>>
#+END_SRC

As the actual imports are not known yet, let us first look at the applications'
structure, defined by =<<app-class-definition>>=. The class is defined by its
name, its super class (the parent class) and a class body. As stated at the
beginning, the class will inherit from the Qt class =QApplication=, which
provides the basics for a Qt GUI application.

#+NAME: app-application-class-definition
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<app-application-class-definition>>=, definition of the =Application= class.
#+BEGIN_SRC python
class Application(QtWidgets.QApplication):
    """Main application for QDE."""

    <<app-application-class-body>>
#+END_SRC

As stated before and as clearly can be seen the class inherits from
=QApplication=. This base class is not yet defined however which would produce
an error when executing the main class. It is therefore necessary to make that
base class available by importing it. As =QApplication= is an external class,
not defined by this project, its import is added to the system imports.

Python offers multiple possibilities concerning imports:

- =from foo import bar= or\\
  =import foo.bar=

  Imports the module =bar= from the package =foo=. All classes, methods and
  variables within =bar= are then accessible.

- =from foo import bar as baz= or\\
  =import foo.bar as baz=

  The importing is the same as above, =bar= is masked as =baz= although. This
  can be convenient when multiple modules have the same name.

- =from bar import SomeClass= or\\
  =import bar.SomeClass= or\\
  =import bar.SomeClass as SomeClass=

  Imports the class =SomeClass= from the module =bar=.

- =from foo.bar import some_method= or\\
  =import foo.bar.some_method= or\\
  =import foo.bar.some_method as some_method=

  Imports the method =some_method= from the module =bar=.

- =from foo import *= or\\
  =import * from foo=

  Imports /all/ sub-packages and sub-modules from the package =foo=. However,
  explicit importing is better than implicit and therefore this option should
  not be used.[fn:14:https://www.python.org/dev/peps/pep-0020/]

- =from bar import *= or
  =import * from bar=

  Imports /all/ classes and methods from the module =bar=. As stated above,
  explicit importing is better than implicit and therefore this option should
  also not be used.

As the naming of the PyQt5 modules prefixes them by /Qt/, it is very unlikely to
have naming conflicts with other modules. Therefore the import format =from
PyQt5 import [QtModuleName]= is used. This still provides a (relatively) unique
naming most probably without any conflicts but reduces the effort when
writing a bit. The import of system modules is therefore as follows.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<app-application-system-imports>>=, import of system imports.
#+NAME: app-application-system-imports
#+BEGIN_SRC python
from PyQt5 import QtGui
from PyQt5 import QtWidgets
#+END_SRC

At this point of time it is rather unclear what the classes body consists of.
What surely must be done, is initializing the class's parent, =QApplication=.
Additionally it would be nice to having a matching title for the window set as
well as maybe an icon for the application. The class's body therefore solely
consists its constructor, as follows.

#+NAME: app-application-class-body
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<app-application-class-body>>=, body of the class =Application=, containing only the constructor at the moment.
#+BEGIN_SRC python

<<app-application-constructor>>

def setup_components(self):
    <<app-application-methods-setup-components>>

def setup_connections(self):
    <<app-application-methods-setup-connections>>

<<app-application-methods>>
#+END_SRC

When looking at the constructor of the =QApplication=
class[fn:10:https://doc.qt.io/qt-5/qapplication.html#QApplication] (as the
documentation of PyQt does not provide a proper description and points to the
C++ documentation), one can see that it needs the argument count =argc= as well
as a vector =argv= containing the arguments. The argument count states how many
arguments are being held by the argument vector =argv=. In the PyQt
implementation however, only one argument is necessary: a list containing the
arguments. =argc= may easily be derived by e.g. =len(arguments)=. Therefore it
is necessary for to constructor to take in =arguments= as a required parameter.
As described in section [[Framework for implementation]], a method for setting up
the connections, which may be defined later on, is added to the constructor. The
application's constructor looks hence as follows.

#+NAME: app-application-constructor
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<app-application-constructor>>=, constructor of the =Application= class.
#+BEGIN_SRC python
def __init__(self, arguments):
    """Constructor.

    :param arguments: a (variable) list of arguments, that are
                      passed when calling this class.
    :type  argv:      list
    """

    super(Application, self).__init__(arguments)
    self.setWindowIcon(QtGui.QIcon("assets/icons/im.png"))
    self.setApplicationName("QDE")
    self.setApplicationDisplayName("QDE")

    self.setup_components()
    self.setup_connections()
#+END_SRC
