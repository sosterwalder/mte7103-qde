# Local Variables:
# org-image-actual-width: nil
# org-babel-use-quick-and-dirty-noweb-expansion: t
# End:

#+BIBLIOGRAPHY: bibliography ieee
#+LATEX_CLASS: scrreprt
#+LATEX_CLASS_OPTIONS: [10pt, openright, notitlepage]
#+LATEX_HEADER: \usepackage[a4paper, left=25mm, right=25mm, top=27mm, headheight=20mm, headsep=10mm, textheight=242mm, footskip=15mm]{geometry}
#+LATEX_HEADER: \usepackage[backend=biber, style=ieee, natbib=true, url=false, doi=true, eprint=false]{biblatex}
#+LATEX_HEADER: \usepackage[dvipsnames]{xcolor}
#+LATEX_HEADER: % Definition of colors
#+LATEX_HEADER: %---------------------------------------------------------------------------
#+LATEX_HEADER: \RequirePackage{color}
#+LATEX_HEADER: \definecolor{linkblue}{rgb}{0,0,0.8}       % Standard
#+LATEX_HEADER: \definecolor{darkblue}{rgb}{0,0.08,0.45}   % Dark blue
#+LATEX_HEADER: \definecolor{bfhgrey}{rgb}{0.41,0.49,0.57} % BFH grey
#+LATEX_HEADER: \definecolor{linkcolor}{rgb}{0,0,0}
#+LATEX_HEADER: \colorlet{Black}{black}
#+LATEX_HEADER: \definecolor{keywords}{rgb}{255,0,0}
#+LATEX_HEADER: \definecolor{red}{rgb}{0.6,0,0}
#+LATEX_HEADER: \definecolor{green}{rgb}{0,0.5,0}
#+LATEX_HEADER: \definecolor{blue}{rgb}{0,0,0.5}
#+LATEX_HEADER: % Syntax colors
#+LATEX_HEADER: \definecolor{syntaxRed}{rgb}{0.6,0,0}
#+LATEX_HEADER: \definecolor{syntaxBlue}{rgb}{0,0,0.5}
#+LATEX_HEADER: \definecolor{syntaxComment}{rgb}{0,0.5,0}
#+LATEX_HEADER: % Background colors
#+LATEX_HEADER: \definecolor{syntaxBackground}{rgb}{0.95, 0.95, 0.95}
#+LATEX_HEADER: %---------------------------------------------------------------------------
#+LATEX_HEADER: \usepackage{tcolorbox}
#+LATEX_HEADER: \usepackage{pgfgantt}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \restylefloat{listing}
#+LATEX_HEADER: \tcbuselibrary{minted,skins}
#+LATEX_HEADER: \definecolor{bashcodebg}{rgb}{0.85,0.85,0.85}
#+LATEX_HEADER: \addbibresource{bibliography.bib}
#+LATEX_HEADER: \usepackage{newverbs}[2011/07/23]
#+LATEX_HEADER: \newcommand{\myverb}{\collectverb{\fcolorbox{black!50}{black!25}}}

#+MACRO: verb \myverb{$1}

#+TITLE: QDE --- A visual animation system.
#+SUBTITLE: MTE-7103: Master-Thesis
#+KEYWORDS:
#+DESCRIPTION:
#+AUTHOR: Sven Osterwalder
#+EMAIL: sven.osterwalder@students.bfh.ch
#+DATE: February 20, 2017
#+OPTIONS: author:t date:t email:t ^:nil H:5

* TODO Introduction

[Introduction here].

* TODO Administrative aspects

Some administrative aspects of this thesis are covered, while they are not
required for the understanding of the result.

The whole documentation uses the male form, whereby both genera are equally
meant.

** Involved persons

| Author     | Sven Osterwalder[fn:1:sven.osterwalder@students.bfh.ch] |                                                                                     |
| Supervisor | Prof. Claude Fuhrer[fn:2:claude.fuhrer@bfh.ch]          | /Supervises the student doing the thesis/                                           |
| Expert     | Dr. Eric Dubuis[fn:17:eric.dubuis@comet.ch]             | /Provides expertise concerning the thesis' subject, monitors and grades the thesis/ |

** Structure of the documentation

This thesis is structured as follows:

- Introduction
- Objectives and limitations
- Procedure
- Implementation
- Conclusion

** Deliverable results

- Report
- Implementation

* TODO Scope

** Motivation

[Motivation.]

** Objectives and limitations

[Objectives and limitations.]

** Preliminary activities

[Preliminary activities.]

** New learning contents

[New learning contents.]

* TODO Procedure
** Organization of work
*** Meetings

Various meetings with the supervising professor, Mr. Claude Fuhrer, helped
reaching the defined goals and preventing erroneous directions of the thesis.
The supervisor supported the author of this thesis by providing suggestions
throughout the held meetings. The minutes of the meetings may be found under
<<Meeting minutes>>.

*** Phases of the project and milestones


| Phase                                    | Description | Week / 2017 |
|------------------------------------------+-------------+-------------|
| Start of the project                     |             |           8 |
| Definition of objectives and limitations |             |         8-9 |
| Documentation and development            |             |        8-30 |
| Corrections                              |             |       30-31 |
| Preparation of the thesis' defense       |             |       31-32 |

| Milestone                           | Description | End of week / 2017 |
|-------------------------------------+-------------+--------------------|
| Project structure is set up         |             |                  8 |
| Mandatory project goals are reached |             |                 30 |
| Hand-in of the thesis               |             |                 31 |
| Defense of the thesis               |             |                 32 |

#+NAME: fig:schedule
#+ATTR_LATEX: :placement [H]
#+ATTR_ORG: :width 50px
#+CAPTION: The project's schedule.
[[./images/project_schedule.png]]

Figure [[fig:schedule]] shows the project's schedule.

*** Literate programming

This thesis' implementation is done by a procedure named ``literate
programming'', invented by Donald Knuth. What this means, is that the
documentation as well as the code for the resulting program reside in the same
file. The documentation is then /weaved/ into a separate document, which may be
any by the editor support format. The code of the program is /tangled/ into a
run-able computer program.

*************** TODO Provide more information about literate programming.
                    Citations, explain fragments, explain referencing
                    fragments, code structure does not have to be ``normal''
*************** END

  Originally it was planned to develop this thesis' application test driven,
  providing (unit-) test-cases first and implementing the functionality
  afterwards. Initial trails showed quickly that this method, in company with
  literate programming, would exaggerate the effort needed. Therefore conventional
  testing is used. Test are developed after implementing functionality and run
  separately. A coverage as high as possible is intended. Test cases are /tangled/
  too, and may be found in the appendix.
*************** TODO Insert reference/link to test cases here.
*************** END

** Standards and principles
*** Code

**** TODO Principles

- Classes use camel case.
- Folders / name-spaces use only small letters.
- Methods are all small caps and use underscores as spaces.
- Signals: do_something
- Slots: on_something
- Importing: {{{verb(from Foo import Bar)}}}\\
  As the naming of the PyQt5 modules prefixes them by /Qt/, it is very unlikely
  to have naming conflicts with other modules. Therefore the import format
  {{{verb(from PyQt5 import [QtModuleName])}}} is used. This still provides a
  (relatively) unique naming most probably without any conflicts but reduces the
  effort when writing a bit. The import of system modules is therefore as
  follows.

**** Layering
     :PROPERTIES:
     :CUSTOM_ID: sec:layering
     :END:

Concerning the architecture, a layered architecture is foreseen, as stated in
\cite[p. 38 ff.]{osterwalder_qde_2016}. A relaxed layered architecture leads to
low coupling, reduces dependencies and enhances cohesion as well as clarity.

As the architecture's core [[Components][components]] are all graphical, a graphical user
interface for those components is developed. As the their data shall be
exportable, it would be relatively tedious if the graphical user interface would
hold and control that data. Instead models and model-view separation are used.
Additionally controllers are introduced which act as workflow objects of the
{{{verb(application)}}} layer and interfere between the model and its view.

***** Model-View-Controller

While models may be instantiated anywhere directly, this would although not
contribute to having clean code and sane data structures. Instead controllers,
lying within the {{{verb(application)}}} layer, will manage instances of models.
The instantiating may either be induced by the graphical user interface
or by the player when loading and playing exported animations.

A view may never contain model-data (coming from the {{{verb(domain)}}} layer)
directly, instead view models are used \cite{martin_fowler_presentation_2004}.

The behavior described above corresponds to the well-known model-view-controller
pattern expanded by view models.

As Qt is used as the core for the editor, it may be quite obvious to use Qt's
model/view programming practices, as described by
[fn:20:http://doc.qt.io/qt-5/model-view-programming.html]. However, Qt combines
the controller and the view, meaning the view acts also as a controller while
still separating the storage of data. The editor application does not actually
store data (in a conventional way, e.g. using a database) but solely exports it.
Due to this circumstance the model-view-controller pattern is explicitly used,
as also stated in \cite[p. 38]{osterwalder_qde_2016}.

*************** TODO Describe the exact process of communication between
*************** ViewModel, Controller and Model.
*************** END

To avoid coupling and therefore dependencies, signals and
slots[fn:16:http://doc.qt.io/qt-5/signalsandslots.html] are used in terms of the
observer pattern to allow inter-object and inter-layer communication.

**** Framework for implementation
     :PROPERTIES:
     :CUSTOM_ID: sec:framework-for-implementation
     :END:

To stay consistent when implementing classes, it make sense to define a rough
framework for implementation, which is as follows:

1. Define necessary signals.
2. Within the constructor,
   + Set up the user interface when it is a class concerning the graphical user
     interface.
   + Set up class-specific aspects, such as the name, the tile or an icon.
   + Set up other components, used by that class.
   + Initialize the connections, meaning hooking up the defined signals with
     corresponding methods.
3. Implement the remaining functionality in terms of methods and slots.

*** Diagrams

 [Diagrams.]

*** Project structure

 [Project structure.]

* TODO Implementation

** Requirements

This chapter describes the requirements to extract the source code out of this
documentation using /tangling/.

At the current point of time, the requirements are the following:

- A Unix derivative as operating system (Linux, macOS).
- Python version 3.5.x or up[fn:3:https://www.python.org].
- Pyenv[fn:4:https://github.com/yyuu/pyenv].
- Pyenv-virtualenv[fn:5:https://github.com/yyuu/pyenv-virtualenv].

The first step is to install a matching version of python for the usage within
the virtual environment. The available Python versions may be listed as follows.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Listing all available versions of Python for use in Pyenv.
#+NAME:       fig:impl-pyenv-list
#+BEGIN_SRC bash
pyenv install --list
#+END_SRC

The desired version may be installed as follows. This example shows the
installation of version 3.6.0.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Installation of Python version 3.6.0 for the usage with Pyenv.
#+NAME:       fig:impl-pyenv-install
#+BEGIN_SRC bash
install 3.6.0
#+END_SRC

It is highly recommended to create and use a project-specific virtual Python
environment. All packages, that are required for this project are installed
within this virtual environment protecting the operating systems' Python
packages.
First the desired version of Python has to be specified, then the desired name
of the virtual environment.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Creation of the virtual environment =qde= for Python using version 3.6.0 of Python.
#+NAME:       fig:impl-pyenv-venv
#+BEGIN_SRC bash
pyenv virtualenv 3.6.0 qde
#+END_SRC

All required dependencies for the project may now safely be installed. Those are
listed in the file =python_requirements.txt= and are installed using =pip=.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Installation of the projects' required dependencies.
#+NAME:       fig:impl-pip-install
#+BEGIN_SRC bash
pip install -r python_requirements.txt
#+END_SRC

All requirements and dependencies are now met and the actual implementation of
the project may begin now.

** Name-spaces and project structure

This chapter describes the planned directory structure as well as how the usage
of name-spaces is intended.

The whole source code shall be placed in the =src= directory underneath the main
directory. The creation of the single directories is not explicitly shown
respectively done, instead the =:mkdirp= option provided by the source code
block structure is used[fn:11:http://orgmode.org/manual/mkdirp.html#mkdirp]. The
option has the same effect as would have =mkdir -p [directory/subdirectory]=: It
creates all needed (sub-) directories, even when tangling a file. This prevents
the tedious and non-interesting creation of directories within this document.

When dealing with directories and files, Python uses the term /package/ for a
(sub-) directories and /module/ for files within directories, that is
modules.[fn:13:https://docs.python.org/3/reference/import.html#packages]

To prevent having multiple modules having the same name, name-spaces are
used[fn:6:https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces].
The main name-space shall be analogous to the projects' name: =qde=. Underneath
the source code folder =src=, each sub-folder represents a package and acts
therefore also as a name-space.

To actually allow a whole package and its modules being imported /as modules/,
it needs to have at least a file inside called =__init__.py=. Those files may be
empty or they may contain regular source code such as classes or methods.

The first stage of the project shows the creation of the /editor/ component, as
it provides the possibility of creating and editing real-time animations which
may then be played back by the /player/ component\cite[p. 29]{osterwalder_qde_2016}.

** Editor

This chapter describes the creation of the /editor/ component.

The /editor/ component shall be placed within the =editor= directory beneath the
=src/qde= directory tree. As stated in the prior chapter this requires as well
an =__init__.py= file to let Python recognize the =editor= directory as a
importable module. This fact and the creation of it is mentioned here for the
sake of completeness. Later on it will be assumed as given and only the source
code blocks for the creation of the =__init__.py= files are provided.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Creation of the =qde= name space and initialization of the name space as module.
#+BEGIN_SRC python :tangle ../src/qde/__init__.py :noweb tangle :mkdirp yes
#+END_SRC
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Creation of the =editor= name space and initialization of the name space as module.
#+BEGIN_SRC python :tangle ../src/qde/editor/__init__.py :noweb tangle :mkdirp yes
#+END_SRC

*** Main application

The main class of a Qt application using a graphical user interface (GUI)
is provided by the class =QApplication=. According to
[fn:7:http://doc.qt.io/Qt-5/qapplication.html] the class may be initialized and
used directly without sub-classing it. It may however be useful to sub-class it
nevertheless as this provides higher flexibility. Therefore the class
=Application= is introduced, which sub-classes the =QApplication= class.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Creation and initialization of the =application= name-space.
#+BEGIN_SRC python :tangle ../src/qde/editor/application/__init__.py :noweb tangle :mkdirp yes
#+END_SRC

At this point it is necessary to think about the functionality of the class
=Application= itself. Very roughly sketched, such a type of application
initializes resources, enters a main loop where it stays until told to shut
down. At the end it frees resources again.

Due to the usage of =QApplication= as super class it is not necessary to
implement a main (event-) loop, as such is provided by Qt itself
[fn:8:http://doc.qt.io/Qt-5/qapplication.html#exec].

Concerning the initialization of
resources[fn:12:https://www.python.org/dev/peps/pep-0263/], the application has
to act as central node between the various layers of the architecture,
initializing them and connecting them using signals.\cite[S. 37 bis 38]{osterwalder_qde_2016}

Before going into too much details about the actual =Application= class, let us
first have a look at the structure of a Python module. Each (proper) Python
module contains an (optional) file encoding, a
docstring[fn:9:https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring],
imports of other modules and either loose methods or a class definition with
methods underneath.

The main module =application= containing also the =Application= class, looks
therefore as follows.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Main application module holding the =Application= class.
#+BEGIN_SRC python :tangle ../src/qde/editor/application/application.py :noweb tangle :mkdirp yes
#!/usr/bin/python
# -*- coding: utf-8 -*-

"""Main application module for QDE."""

<<app-imports>>

<<app-class-definition>>
#+END_SRC

#+RESULTS:

**** Imports
As you can see, the imports of the module are defined by =<<app-imports>>=. For
achieving better readability, the imports are split up into system imports,
meaning modules provided by the Python library itself or external modules, and
project imports, modules created within the project. The imports are therefore
split up as follows.

#+NAME: app-imports
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<app-imports>>=, definition of the application modules' imports.
#+BEGIN_SRC python
# System imports
<<app-system-imports>>

# Project imports
<<app-project-imports>>
#+END_SRC

As the actual imports are not known yet, let us first look at the applications'
structure, defined by =<<app-class-definition>>=. The class is defined by its
name, its super class (the parent class) and a class body. As stated at the
beginning, the class will inherit from the Qt class =QApplication=, which
provides the basics for a Qt GUI application.

#+NAME: app-class-definition
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<app-class-definition>>=, definition of the =Application= class.
#+BEGIN_SRC python
class Application(QtWidgets.QApplication):
    """Main application for QDE."""

    <<app-class-body>>
#+END_SRC

As stated before and as clearly can be seen the class inherits from
=QApplication=. This base class is not yet defined however which would produce
an error when executing the main class. It is therefore necessary to make that
base class available by importing it. As =QApplication= is an external class,
not defined by this project, its import is added to the system imports.

Python offers multiple possibilities concerning imports:

- =from foo import bar= or\\
  =import foo.bar=

  Imports the module =bar= from the package =foo=. All classes, methods and
  variables within =bar= are then accessible.

- =from foo import bar as baz= or\\
  =import foo.bar as baz=

  The importing is the same as above, =bar= is masked as =baz= although. This
  can be convenient when multiple modules have the same name.

- =from bar import SomeClass= or\\
  =import bar.SomeClass= or\\
  =import bar.SomeClass as SomeClass=

  Imports the class =SomeClass= from the module =bar=.

- =from foo.bar import some_method= or\\
  =import foo.bar.some_method= or\\
  =import foo.bar.some_method as some_method=

  Imports the method =some_method= from the module =bar=.

- =from foo import *= or\\
  =import * from foo=

  Imports /all/ sub-packages and sub-modules from the package =foo=. However,
  explicit importing is better than implicit and therefore this option should
  not be used.[fn:14:https://www.python.org/dev/peps/pep-0020/]

- =from bar import *= or
  =import * from bar=

  Imports /all/ classes and methods from the module =bar=. As stated above,
  explicit importing is better than implicit and therefore this option should
  also not be used.

As the naming of the PyQt5 modules prefixes them by /Qt/, it is very unlikely to
have naming conflicts with other modules. Therefore the import format =from
PyQt5 import [QtModuleName]= is used. This still provides a (relatively) unique
naming most probably without any conflicts but reduces the effort when
writing a bit. The import of system modules is therefore as follows.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<app-system-imports>>=, import of system imports.
#+NAME: app-system-imports
#+HEADER: :prologue <<app-system-imports>>
#+BEGIN_SRC python
from PyQt5 import QtGui
from PyQt5 import QtWidgets
#+END_SRC

At this point of time it is rather unclear what the classes body consists of.
What surely must be done, is initializing the class's parent, =QApplication=.
Additionally it would be nice to having a matching title for the window set as
well as maybe an icon for the application. The class's body therefore solely
consists its constructor, as follows.

#+NAME: app-class-body
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<app-class-body>>=, body of the class =Application=, containing only the constructor at the moment.
#+BEGIN_SRC python

<<app-constructor>>

def setup_components(self):
    <<app-setup-components>>

def setup_connections(self):
    <<app-setup-connections>>

<<app-methods>>
#+END_SRC

When looking at the constructor of the =QApplication=
class[fn:10:https://doc.qt.io/qt-5/qapplication.html#QApplication] (as the
documentation of PyQt does not provide a proper description and points to the
C++ documentation), one can see that it needs the argument count =argc= as well
as a vector =argv= containing the arguments. The argument count states how many
arguments are being held by the argument vector =argv=. In the PyQt
implementation however, only one argument is necessary: a list containing the
arguments. =argc= may easily be derived by e.g. =len(arguments)=. Therefore it
is necessary for to constructor to take in =arguments= as a required parameter.
As described in section [[Framework for implementation]], a method for setting up
the connections, which may be defined later on, is added to the constructor. The
application's constructor looks hence as follows.

#+NAME: app-constructor
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<app-constructor>>=, constructor of the =Application= class.
#+BEGIN_SRC python
def __init__(self, arguments):
    """Constructor.

    :param arguments: a (variable) list of arguments, that are
                      passed when calling this class.
    :type  argv:      list
    """

    super(Application, self).__init__(arguments)
    self.setWindowIcon(QtGui.QIcon("assets/icons/im.png"))
    self.setApplicationName("QDE")
    self.setApplicationDisplayName("QDE")

    self.setup_components()
    self.setup_connections()
#+END_SRC

*** Main entry point

If you run the application at this point nothing happens. Python is able to
resolve all dependencies but as there is no =main= function there is nothing
else to do, so nothing happens. The execution of the main loop is started when
calling the =exec= function of a =QApplication=. So, for actually being able to
start the application, a =main= function is needed, which creates an instance of
the =Application= class and then runs its =exec= function.

The main function could easily be added to the =Application= class, but for
somebody who is not familiar with this applications' structure, this might be
rather confusing. Instead a =editor.py= file at the root of the source directory
=src= is much more intuitive.

All that the main file shall do, is creating an instance of the main
application, execute it and exit at the end of its life cycle.

As stated in <<Imports>>, the constructor of =QApplication= requires the
argument =arguments= to be passed in (yes, the naming may be a bit confusing
here). The =arguments= argument is a list of arguments passed when calling the
main entry point of the editor application. For example when calling =python editor.py foo bar baz=,
the variable =arguments= would be the list =[foo, bar, baz]= with
=len(arguments)= being 3. To obtain the passed-in arguments, the =argv=
attribute of the =sys= module may be used, as this holds exactly the list of the
passed-in arguments when calling a Python script.

The main entry script of the editor =editor.py= is therefore defined as follows.

#+NAME: main
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    =<<main>>=, the main entry point for the whole editor application.
#+BEGIN_SRC python :tangle ../src/editor.py :noweb tangle :mkdirp yes
#!/usr/bin/python
# -*- coding: utf-8 -*-

""" Main entry point for the QDE editor application. """

# System imports
import sys

# Project imports
from qde.editor.application import application


if __name__ == "__main__":
    app = application.Application(sys.argv)
    status = app.exec()
    sys.exit(status)
#+END_SRC

If you run the application now, a bit more happens. Python is able to
resolve all dependencies and to find a =main= function which is then called.
The =main= function creates an instance of the =Application= class and executes
it by calling =exec=. This in turn enters the Qt main loop which keeps the
application running unless explicitly told to shut down. But at this point there
is nothing who could receive the request to shut down, so the only possibility
to shut down the application is to quit or kill the spawned Python process
itself --- not very nice.

*** Components
    :PROPERTIES:
    :CUSTOM_ID: sec:components
    :END:

Instead it would be nice to have at least a window shown when starting the
application, which allows a normal, deterministic and convenient shut down of
the application, either by a keyboard shortcut or by selecting an appropriate
option in the applications' menu.

But having only a plain window is not that interesting, so this might be a good
time to look at the components of the editor, which are defined by
\citep[p. 29 ff.]{osterwalder_qde_2016} and are the following:

- A scene graph, allowing the creation and deletion of scenes. The scene graph
  has at least a root scene.
- A node-based graph structure, allowing the composition of scenes using nodes
  and connections between the nodes.
- A parameter window, showing parameters of the currently selected graph node.
- A rendering window, rendering the currently selected node or scene.
- A sequencer, allowing a time-based scheduling of defined scenes.

What \cite{osterwalder_qde_2016} does not explicitly mention, is the main
window, which holds all those components and allows a proper shut down of the
application.

As a starting point, we shall implement the class =MainWindow= representing the
main window.

**** Main window

Before implementing the features of the main window, its features will be
described. The main window is the central aspect of the graphical user interface
and is hence part of the {{{verb(gui)}}} package.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Creation of the =gui= name space and initialization of the name space as module.
#+BEGIN_SRC python :tangle ../src/qde/editor/gui/__init__.py :noweb tangle :mkdirp yes
#+END_SRC


Its main functionality is to set up the actual user interface, containing all
the components, described by [[Components]], as widgets. Qt offers the class
=QMainWindow= from which =MainWindow= may inherit. The thoughts about the
implementation follow section [[Framework for implementation]].

The first step is setting up the necessary signals. They may not all be known at
this point and may therefore be expanded later on. As described in section
[[Components]], it would be nice if =MainWindow= would react to a request for
closing it, either by a keyboard shortcut or a menu command. However,
=MainWindow= is not able to force the =Application= to quit by itself. It would
be possible to pass =MainWindow= a reference to =Application= but that would
lead to a somewhat tight coupling and is therefore not considered as an option.
Signals and slots allow exactly such cross-layer communication without coupling
components tightly.

First, the outline of =MainWindow= is defined.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Module holding the main application window class, =MainWindow=.
#+BEGIN_SRC python :tangle ../src/qde/editor/gui/main_window.py :noweb tangle :mkdirp yes
#!/usr/bin/python
# -*- coding: utf-8 -*-

""" Module holding the main application window. """

# System imports
<<main-window-system-imports>>

# Project imports
<<main-window-project-imports>>


class MainWindow(QtWidgets.QMainWindow):
    """The main window class.
    Acts as an entry point for the QDE editor application.
    """

    <<main-window-signals>>

    def __init__(self):
        """Constructor."""

        <<main-window-constructor>>

    <<main-window-methods>>

    <<main-window-slots>>
#+END_SRC

A fitting name for the signal, when the window and therefore the application,
shall be closed might be =window_closing=. The signal is introduced as follows.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Definition of signals for the main application window class, =MainWindow=.
#+NAME:       main-window-signals
#+HEADER:     :prologue <<main-window-signals>>
#+BEGIN_SRC python
# Signals
window_closing = QtCore.pyqtSignal()
#+END_SRC

Now, that the signal for closing the window and the application is defined, two
additional things need to be considered: The emission of the signal by
=MainWindow= itself as well as the consumption of the signal by a slots of other
classes.

First, the emission of the signal is implemented. The signal shall be emitted
when the escape key on the keyboard is pressed or when the corresponding menu
item was selected. For the first case, the keyboard event, Qt provides luckily
events which may be used. Their outline is already provided by the parent class
=QMainWindow= and therefore the event(s) simply need to be implemented. The
event which listens to keyboard keys being pressed is called =keyPressEvent= and
provides an event-object of type =QEvent=. All there is to do, is to retrieve
the event's key by calling its =key= method and check if that key is actually
the escape key by comparing it to =Key_Escape=, provided by Qt. If this
comparison is true, the signal shall be emitted.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Implementation of the =keyPressEvent= method on the =MainWindow= class.
#+NAME:       main-window-keypressevent
#+BEGIN_SRC python
def keyPressEvent(self, event):
    """Gets triggered when a key press event is raised.

    :param event: holds the triggered event.
    :type  event: QKeyEvent
    """

    if event.key() == QtCore.Qt.Key_Escape:
        self.window_closing.emit()
    else:
        super(MainWindow, self).keyPressEvent(event)
#+END_SRC

Additionally the signal shall be emitted when selecting a corresponding menu
item. But currently there is no such menu item defined. Qt handles interactions
with menu items by using actions (=QAction=). They provide themselves a couple
of signals, one being =triggered=, which gets emitted as soon as the action was
triggered by a clicking on a menu item. As it is not possible to connect a
signal with another signal, a slot, which receives the signal, needs to be
defined. A slot is an annotated method.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    The =on_quit= method, which acts as a slot when the menu item for quitting the application was triggered.
#+NAME:       main-window-slots
#+HEADER:     :prologue <<main-window-slots>>
#+BEGIN_SRC python
@QtCore.pyqtSlot()
def on_quit(self):
    """Slot which emits the :any:`window_closing` signal.
    This slot gets triggered upon the selection of the menu item to close the
    QDE application.
    """

    self.window_closing.emit()
#+END_SRC

Now the main window is able to emit the signal it is shutting down (or
rather it would like to shut down), but so far no one is listening to that
signal, so nothing happens when that signal is being emitted.

This leads to an expansion of the main application's construction: The main
application has to create a main window an listen to its =window_closing=
signal. Luckily =Application= provides already a =quit= slot through
=QApplication=.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Expansion of setting up the main application's components by the initialization of =MainWindow= and its signals.
#+NAME:       app-setup-components
#+HEADER:     :prologue <<app-setup-components>>
#+BEGIN_SRC python
    self.main_window = qde_main_window.MainWindow()
    self.main_window.window_closing.connect(self.quit)
#+END_SRC

So far none of the additional modules have been defined as there are no
additional modules imported yet. The missing modules need to be added to the
main application as well as the main window.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Expansion of =<<app-project-imports>>= by the missing imports.
#+NAME:       app-project-imports
#+HEADER:     :prologue <<app-project-imports>>
#+BEGIN_SRC   python
from qde.editor.gui import main_window as qde_main_window
#+END_SRC

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Expansion of =<<main-window-system-imports>>= by the missing imports.
#+NAME:       main-window-system-imports
#+HEADER:     :prologue <<main-window-system-imports>>
#+BEGIN_SRC   python
from PyQt5 import QtCore
from PyQt5 import QtWidgets
#+END_SRC

Yet the constructor for the main window is still missing, so running the
application would still do nothing. Therefore the constructor for the main
window is now implemented. At the current point its solely purpose is to call
the its parent's constructor.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Constructor for the main window class =MainWindow=.
#+NAME:       main-window-constructor
#+HEADER:     :prologue <<main-window-constructor>>
#+BEGIN_SRC python
super(MainWindow, self).__init__()
#+END_SRC

Although a Python process is spawned when starting the application, the main
window is still not shown. The problem is, that the main window has no central
widget
set[fn:15:http://doc.qt.io/qt-5/qmainwindow.html#creating-main-window-components].
Setting a central widget and setting a layout for it solves this problem.

The above described task matches perfectly the second point described in section
[[Framework for implementation]]. The described task will therefore be put in a
method named =setup_ui= and the constructor will be expanded correspondingly.
The method =setup_ui= seems also a very good place for setting things like the
size of the window, setting its (object-) name and its title as well as moving
it to a position on the user's screen. To ensure that the window is not hidden
behind other windows, the method =activateWindow= coming from =QWidget= is
called.

As it is not sure at this point, if the main window will receive additional
methods, it may be wise to split =<<main-window-methods>>= up, by inserting the
yet known methods (only =setup_ui= so far) explicitly. This provides the
advantage, that new methods can easily be appended and the implemented methods
may be expanded easily as well.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    The placeholder =<<main-window-methods>>= declared explicitly.
#+NAME:       main-window-methods
#+HEADER:     :prologue <<main-window-methods>>
#+BEGIN_SRC python
<<main-window-keypressevent>>

<<main-window-setupui>>
#+END_SRC

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    The method =setup_ui=, which was added to =<<main-window-methods>> before, for setting up user interface specific tasks within the main window class =MainWindow=.
#+NAME:       main-window-setupui
#+BEGIN_SRC python
def setup_ui(self):
    """Sets up the user interface specific components."""

    self.setObjectName('MainWindow')
    self.setWindowTitle('QDE')
    self.resize(1024, 768)
    self.move(100, 100)
    self.activateWindow()

    central_widget = QtWidgets.QWidget(self)
    central_widget.setObjectName('central_widget')
    grid_layout = QtWidgets.QGridLayout(central_widget)
    central_widget.setLayout(grid_layout)
    self.setCentralWidget(central_widget)
    self.statusBar().showMessage('Ready.')
#+END_SRC

Now the =setup_ui= method simply needs to be added to the constructor of the
class =MainWindow=.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    The method =setup_ui= is added to the constructor of main window class =MainWindow=.
#+NAME:       main-window-constructor
#+HEADER:     :prologue <<main-window-constructor>>
#+BEGIN_SRC python
self.setup_ui()
#+END_SRC

Finally the main window has to be shown by calling its {{{verb(show)}}} method
at the end of the main application's construction.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    The main window is being shown at the end of the main application's construction.
#+NAME:       app-constructor
#+HEADER:     :prologue <<app-constructor>>
#+BEGIN_SRC python

    self.main_window.show()
#+END_SRC

#+NAME: fig:editor-alpha-01
#+ATTR_LATEX: :width 2in :placement [H]
#+ATTR_ORG: :width 50px
#+CAPTION: The QDE editor application in a very early stage, containing only a grid layout.
[[./images/qde_alpha_01.png]]

When starting the application a plain window containing a grid layout is shown,
as can be seen in figure [[fig:editor-alpha-01]]. As written in [[Components]] and
shown in \citep[p. 29 ff.]{osterwalder_qde_2016}, the main window will contain all
the components. To ensure, that those components are shown as defined, a simple
grid layout may not provide enough possibilities.

A possible solution to reach the desired layout is to use the horizontal box
layout =QHBoxLayout= in combination with splitters. The horizontal box layout
lines up widgets horizontally where as the splitters allow splitting either
horizontally or vertically. Recalling the components from [[Components]], the following are needed:

- A scene graph, on the left of the window, covering the whole height
- A node graph on the right of the scene graph, covering as much height as
  possible
- A view for showing the properties (and therefore parameters) of the selected
  node on the right of the node graph, covering as much height as possible
- A display for rendering the selected node, on the right of the properties
  view, covering as much height as possible
- A sequencer at the right of the scene graph and below the other components at
  the bottom of the window, covering as much width as possible

To sum up, a horizontally box layout and a vertical splitter allow splitting the
main window in two halves: The left side will be used for the scene graph where
as the other side will hold the remaining components. As the sequencer is
located below the other components of the right side, a horizontal splitter is
needed for proper separation. The components above the sequencer could simply be
added to the right side of the split as a horizontal box layout builds the
layout's basis, for convenience however, additional splitters will be used. This
allows the user to re-arrange the layout to his taste. To achieve the described
layout, the following tasks are necessary:

- Create a widget for the horizontal box layout
- Create the horizontal box layout
- Add the scene graph to the horizontal box layout
- Instantiate the components of the split's right side
  - The node graph
  - The parameter view
  - The rendering view
- Create a horizontal splitter
  - Add the rendering view to it
  - Add the parameter view to it
- Create a vertical splitter
  - Add the horizontally splitter to it
  - Add the scene graph to it
- Add the vertical splitter to the horizontal box layout

The implementation of the explained layout is done in the =setup_ui= method and
is as follows. For the not yet existing widgets placeholders are used.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Lay-outing of the main window by expanding the =setup_ui= method.
#+NAME:       main-window-setupui
#+HEADER:     :prologue <<main-window-setupui>>
#+BEGIN_SRC   python

    horizontal_layout_widget = QtWidgets.QWidget(central_widget)
    horizontal_layout_widget.setObjectName('horizontal_layout_widget')
    horizontal_layout_widget.setGeometry(QtCore.QRect(12, 12, 781, 541))
    horizontal_layout_widget.setSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding,
                                           QtWidgets.QSizePolicy.MinimumExpanding)
    grid_layout.addWidget(horizontal_layout_widget, 0, 0)

    horizontal_layout = QtWidgets.QHBoxLayout(horizontal_layout_widget)
    horizontal_layout.setObjectName('horizontal_layout')
    horizontal_layout.setContentsMargins(0, 0, 0, 0)

    <<main-window-setupui-scenegraph>>
    <<main-window-setupui-nodegraph>>
    <<main-window-setupui-parameterview>>
    <<main-window-setupui-renderview>>

    horizontal_splitter = QtWidgets.QSplitter()
    <<main-window-setupui-add-renderview-to-horizontal-splitter>>
    <<main-window-setupui-add-parameterview-to-horizontal-splitter>>

    vertical_splitter = QtWidgets.QSplitter()
    vertical_splitter.setOrientation(QtCore.Qt.Vertical)
    vertical_splitter.addWidget(horizontal_splitter)
    <<main-window-setupui-add-nodegraph-to-vertical-splitter>>

    horizontal_layout.addWidget(vertical_splitter)
#+END_SRC

All the above taken actions to lay out the main window change nothing in the
window's yet plain appearance. This is quite obvious, as none of the actual
components are implemented yet.

The most straight-forward component to implement may be scene graph, so this is
a good starting point for the implementation of the remaining components.

**** DONE Scene graph
     CLOSED: [2017-03-10 Fri 17:19]

The scene graph component does, as also the other components do, have two
aspects to consider: A graphical aspect as well as its data structure. As
written in section [[Layering]], each component has a view --- residing in the /gui/
package ---, a model --- residing in the /domain/ package --- and a controller
acting as workflow object --- residing in the /application/ package.

The {{{verb(SceneGraphController)}}} class will manage instances of scene models
whereas the {{{verb(SceneGraphView)}}} will display a tree of scenes, starting
with a root scene of type {{{verb(SceneModel)}}}.

The least tedious of those aspects may be the scene model, {{{verb(SceneModel)}}}, so
the scene model is implemented first.

As at this point its functionality is not known, its implementation is rather
dull. It is composed of solely an empty constructor.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Creation of the =domain= name space and initialization of the name space as module.
#+BEGIN_SRC python :tangle ../src/qde/editor/domain/__init__.py :noweb tangle :mkdirp yes
#+END_SRC

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Scene module inside the =domain= package, holding the =SceneModel= class.
#+BEGIN_SRC python :tangle ../src/qde/editor/domain/scene.py :noweb tangle :mkdirp yes
#!/usr/bin/python
# -*- coding: utf-8 -*-

""" Module holding scene related aspects concerning the domain layer. """

# System imports
<<domain-scene-system-imports>>

# Project imports
<<domain-scene-project-imports>>


class SceneModel(object):
    """The scene model.
    It is used as a base class for scene instances within the scene graph.
    """

    <<domain-scene-signals>>

    <<domain-scene-constructor>>

    <<domain-scene-methods>>

    <<domain-scene-slots>>
#+END_SRC

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Constructor of the scene model class, =SceneModel=.
#+NAME:       domain-scene-constructor
#+HEADER:     :prologue <<domain-scene-constructor>>
#+BEGIN_SRC python
def __init__(self):
    pass
#+END_SRC

Scenes may now be instantiated, it is however important to do the management of
scenes in a controlled manner. This is where the specific controllers within the
{{{verb(application)}}} layer come in, as described in more detail in section
[[Layering]]. Therefore the class {{{verb(SceneGraphController)}}} will now be
implemented, for being able to manage scenes.

As the scene graph shall be built as a tree structure, an appropriate data
structure is needed. Qt provides the {{{verb(QTreeWidget)}}} class, but that
class is in this case not suitable, as it does not separate the data from its
representation, as stated by Qt: ``Developers who do not need the flexibility of
the Model/View framework can use this class to create simple hierarchical lists
very easily. A more flexible approach involves combining a QTreeView with a
standard item model. This allows the storage of data to be separated from its
representation.''[fn:18:http://doc.qt.io/qt-5/qtreewidget.html#details]

Therefore the class
{{{verb(QAbstractItemModel)}}}[fn:e3eb4d58d8c947d:http://doc.qt.io/qt-5/qabstractitemmodel.html]
is chosen for implementation. Before implementing the actual methods, it is
important to think about the attributes, that the scene graph controller will
have. According to the class's documentation, some methods must be implemented
at very least: ``When subclassing QAbstractItemModel, at the very least you must
implement index(), parent(), rowCount(), columnCount(), and data(). These
functions are used in all read-only models, and form the basis of editable
models.''

For being able edit the nodes of the scene graph and to have a custom header
displayed, further methods have to be implemented: ``To enable editing in your
model, you must also implement setData(), and reimplement flags() to ensure that
ItemIsEditable is returned. You can also reimplement headerData() and
setHeaderData() to control the way the headers for your model are presented.''

From the remarks above the attributes may be defined. As the scene graph is
implemented as a tree structure, it must have a *root node*, which is of type
{{{verb(SceneGraphViewModel)}}} (coming from the {{{verb(gui_domain)}}} layer).
Whenever a scene is added as a node, the item model needs to be informed for
updating the display. This happens by emitting the {{{verb(rowsInserted)}}}
signal, which is already given by the {{{verb(QAbstractItemModel)}}} class. This
signal needs the current model index as well as the first and last position as
parameters. The current model index represents the parent of the item to add,
whereas the item will be inserted between the two given positions, first and
last. Concerning the model index the Qt documentation states: ``An invalid model
index can be constructed with the QModelIndex constructor. Invalid indexes are
often used as parent indexes when referring to top-level items in a model.''
Therefore for creating the initial node of the scene graph, the root node, the
constructor of {{{verb(QModelIndex)}}} will be used.
As *header data* the name of the scenes as well as the number of nodes a scene
contains shall be displayed.

Speaking of signals, brings up the definition of signals for the scene graph
controller. To prevent coupling, two signals are added: {{{verb(scene_added)}}}
and {{{verb(scene_removed)}}}. The first will be emitted whenever a new node is
inserted into the scene graph by {{{verb(insertRows)}}} being called. The latter
is emitted whenever an existing node is removed from the scene graph by calling
the {{{verb(removeRows)}}} method.

But what currently is missing for being able to implement a first draft of the
scene graph, is the view model {{{verb(SceneGraphViewModel)}}}. View models are
used to visually represent something within the graphical user interface and
they provide an interface to the {{{verb(domain)}}} layer. To this point, a
simple reference in terms of an attribute is used, which may be changed later
on. Concerning the user interface, a view model must fulfill the requirements
posed by the user interface's corresponding component. In terms of the scene
graph the view model must provide at least a name and a row. Additionally, as
already mentioned, a reference to the domain object is being added. The class
inherits from {{{verb(QObject)}}} as this base class already provides a tree
structure, which fits the structure of the scene graph perfectly.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Creation of the =gui_domain= name space and initialization of the name space as module.
#+BEGIN_SRC python :tangle ../src/qde/editor/gui_domain/__init__.py :noweb tangle :mkdirp yes
#+END_SRC

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Scene module inside the =gui_domain= package, holding currently only the =SceneGraphViewModel= class.
#+NAME:       guidomain-scene
#+BEGIN_SRC python :tangle ../src/qde/editor/gui_domain/scene.py :noweb tangle :mkdirp yes
#!/usr/bin/python
# -*- coding: utf-8 -*-

""" Module holding scene related aspects concerning the gui_domain layer. """

# System imports
from PyQt5 import Qt
from PyQt5 import QtCore
<<guidomain-scene-system-imports>>

# Project imports
<<guidomain-scene-project-imports>>


class SceneGraphViewModel(Qt.QObject):
    """View model representing scene graph items.

    The SceneGraphViewModel corresponds to an entry within the scene graph. It
    is used by the QAbstractItemModel class and must therefore at least provide
    a name and a row.
    """

    <<guidomain-scene-scenegraphviewmodel-signals>>

    <<guidomain-scene-scenegraphviewmodel-constructor>>

    <<guidomain-scene-scenegraphviewmodel-methods>>

    <<guidomain-scene-scenegraphviewmodel-slots>>
#+END_SRC

#+NAME: guidomain-scene-scenegraphviewmodel-constructor
#+CAPTION:    Constructor for the scene graph view model, =SceneGraphViewModel=.
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+BEGIN_SRC python
# .. py:function::
def __init__(
        self,
        row,
        domain_object,
        name=QtCore.QCoreApplication.translate('SceneGraphViewModel', 'New scene'),
        parent=None
):
    """Constructor.

    :param row:           The row the view model is in.
    :type  row:           int
    :param domain_object: Reference to a scene model.
    :type  domain_object: qde.editor.domain.scene.SceneModel
    :param name:          The name of the view model, which will be displayed in
                          the scene graph.
    :type  name:          str
    :param parent:        The parent of the current view model within the scene
                          graph.
    :type parent:         qde.editor.gui_domain.scene.SceneGraphViewModel
    """

    super(SceneGraphViewModel, self).__init__(parent)
    self.row  = row
    self.domain_object = domain_object
    self.name = name
#+END_SRC

Now, with the scene graph view model being available, the scene graph controller
may finally be implemented.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+NAME:       lst:app-scenegraph
#+CAPTION:    The outline of the =SceneGraphController= class, inside the =application= package.
#+BEGIN_SRC python :tangle ../src/qde/editor/application/scene_graph.py :noweb tangle :mkdirp yes
#!/usr/bin/python
# -*- coding: utf-8 -*-

""" Module holding scene graph related aspects concerning the application layer.
"""

# System imports
from PyQt5 import QtCore
<<app-scenegraph-system-imports>>

# Project imports
from qde.editor.domain     import scene as domain_scene
from qde.editor.gui_domain import scene as guidomain_scene
<<app-scenegraph-project-imports>>


class SceneGraphController(QtCore.QAbstractItemModel):
    """The scene graph controller.
    A controller for managing the scene graph by adding, editing and removing
    scenes.
    """

    scene_added = QtCore.pyqtSignal(domain_scene.SceneModel)
    scene_removed = QtCore.pyqtSignal(domain_scene.SceneModel)
    <<app-scenegraph-controller-signals>>

    def __init__(self, root_node_domain_object, parent=None):
        """Constructor.

        :param root_node_domain_object: The domain object of the root node of
                                        the scene graph view model.
        :type root_node_domain_object:  qde.editor.domain.scene.SceneModel
        :param parent: The parent of the current view model within the scene
                       graph.
        :type parent:  qde.editor.gui_domain.scene.SceneGraphViewModel
        """

        super(SceneGraphController, self).__init__(parent)
        self.header_data = [
            QtCore.QCoreApplication.translate(__class__.__name__, 'Name'),
            QtCore.QCoreApplication.translate(__class__.__name__, '# Nodes')
        ]
        self.root_node = guidomain_scene.SceneGraphViewModel(
            row=0,
            domain_object=root_node_domain_object,
            name=QtCore.QCoreApplication.translate(__class__.__name__, 'Root scene')
        )
        self.rowsInserted.emit(QtCore.QModelIndex(), 0, 1)
        <<app-scenegraph-controller-constructor>>

    <<app-scenegraph-controller-methods>>

    <<app-scenegraph-controller-slots>>
#+END_SRC

At this point data structures in terms of a (data-) model, which holds the
actual, for the scene graph relevant data of a scene, and a view model, which
holds the data relevant for the user interface, are implemented. Further a
controller for handling the flow of the data for both models is implemented.
What is still missing, is the actual representation of the scene graph in terms
of a view.

Qt offers a plethora of widgets for implementing views. One such widget is
{{{verb(QTreeView)}}}, which ``implements a tree representation of items from a
model. This class is used to provide standard hierarchical lists that were
previously provided by the QListView class, but using the more flexible approach
provided by Qt's model/view
architecture.''[fn:f377826acb87691:http://doc.qt.io/qt-5/qtreeview.html#details]

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    The outline of the =SceneGraphView= class, within the =scene= module of the =gui= package.
#+BEGIN_SRC python :tangle ../src/qde/editor/gui/scene.py :noweb tangle :mkdirp yes
#!/usr/bin/python
# -*- coding: utf-8 -*-

""" Module holding scene related aspects concerning the graphical user interface layer.
"""

# System imports
from PyQt5 import QtWidgets
<<gui-scene-system-imports>>

# Project imports
<<gui-scene-project-imports>>


class SceneGraphView(QtWidgets.QTreeView):
    """The scene graph view widget.
    A widget for displaying and managing the scene graph.
    """

    <<gui-scene-controller-signals>>

    def __init__(self, parent=None):
        """Constructor.

        :param parent:        The parent of the current view widget.
        :type parent:         QtCore.QObject
        """

        super(SceneGraphView, self).__init__(parent)
        <<gui-scene-graph-constructor>>

    <<gui-scene-graph-methods>>

    <<gui-scene-graph-slots>>
#+END_SRC

Having the scene graph view implemented as a widget, it is now necessary to add
the widget to the main window and initializing it. As described in section
TODO, the widget is added to the horizontal layout, using the earlier defined
{{{verb(main-window-setupui-scenegraph)}}} placeholder. For being able to
instantiate a scene graph widget, its module must be imported as well. The
maximum width of the widget is limited by using the {{{verb(setMaximumWidth)}}}
method.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Import of the =scene= module from the =gui= layer.
#+NAME:       main-window-project-imports
#+HEADER:     :prologue <<main-window-project-imports>>
#+BEGIN_SRC python
from qde.editor.gui import scene as guiscene
#+END_SRC

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    The scene graph widget is being initialized and added to the horizontal layout.
#+NAME:       main-window-setupui-scenegraph
#+HEADER:     :prologue <<main-window-setupui-scenegraph>>
#+BEGIN_SRC python
self.scene_graph_widget = guiscene.SceneGraphView()
self.scene_graph_widget.setObjectName('scene_graph')
self.scene_graph_widget.setMaximumWidth(300)
horizontal_layout.addWidget(self.scene_graph_widget)
#+END_SRC

When starting the editor application now, after implementing and adding the
scene graph widget, the widget appears on the left side of the main window. It
does not provide any functionality yet.

#+NAME: fig:editor-alpha-02
#+ATTR_LATEX: :width 2in :placement [H]
#+ATTR_ORG: :width 50px
#+CAPTION: The QDE editor application having the scene graph widget added, which is visible as a blank, white rectangle on the left of the window.
[[./images/qde_alpha_02.png]]

For finally being able to manage scenes within the scene graph, a few aspects
are still missing, which will be tackled now.

First of all, the scene graph appears to hold no data at all. This is not
surprising, as no scene nodes were added by now, which might be a good point to
start with. Actually this is not the entire truth, as the root node (view model)
was already added within the scene graph controller. The controller emits the
signal, that a row was inserted, but no other component is receiving this
signal. Obviously this could be achieved by connecting the scene graph
controller and the scene graph view, but as Qt's model/view approach is at least
partially used, simply setting the view's model leads to the same result while
providing greater functionality.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    The method =setup_connections= being defined by setting the scene graph widget's model.
#+BEGIN_SRC python
<<app-setup-connections>>=
    self.main_window.scene_graph_widget.setModel(
        self.scene_graph_controller
    )
#+END_SRC
#+NAME:       app-setup-connections
#+HEADER:     :prologue <<app-setup-connections>>
#+BEGIN_SRC python :exports none
    self.main_window.scene_graph_widget.setModel(
        self.scene_graph_controller
    )
#+END_SRC

The component that ties the layers together, is, as previously described, the
main application. This means, that the main application has to provide all the
necessary data structures and controllers. Regarding the scene graph this means
setting up a root scene (as a domain-/data-model) and setting up the scene graph
controller. As the main application's layer, the {{{verb(application)}}} layer,
is directly below the layer of the view models, {{{verb(gui_domain)}}} this
opposes no problem.

Therefore the root scene as well as the scene graph controller will be
implemented in the main application's {{{verb(setup_components)}}} method,
whereas setting the scene graph widget's model will be implemented in the
{{{verb(setup_connections)}}} method.

#+CAPTION:    The method =setup_components= being expanded by the creation of the root scene as well as the scene graph controller.
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+BEGIN_SRC python
<<app-setup-components>>+=
    root_scene = scene.SceneModel()
    self.scene_graph_controller = scene_graph.SceneGraphController(root_scene)
#+END_SRC
#+NAME:       app-setup-components
#+HEADER:     :prologue <<app-setup-components>>
#+BEGIN_SRC python :exports none
    root_scene = scene.SceneModel()
    self.scene_graph_controller = scene_graph.SceneGraphController(root_scene)
#+END_SRC

The necessary imports are still missing however, so those are added to the main
application's imports.

#+NAME:       app-project-imports
#+HEADER:     :prologue <<app-project-imports>>
#+BEGIN_SRC python :exports none
from qde.editor.domain import scene
from qde.editor.application import scene_graph
#+END_SRC
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Expansion of the main application's imports by the necessary packages.
#+BEGIN_SRC python :noweb yes
<app-project-imports>+=
    <<app-project-imports>>
#+END_SRC

#+RESULTS: app-project-imports

The application is still not showing the desired result: The display of the
scene graph in form of a tree containing the root node. When looking at the
outputs of the application, the messages as seen in listing [[lst:app-error-01]] can
be observed.

#+CAPTION: Output (erroneous) when running the editor application.
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+NAME: lst:app-error-01
#+BEGIN_SRC bash
NotImplementedError: QAbstractItemModel.columnCount() is abstract and must be overridden
NotImplementedError: QAbstractItemModel.rowCount() is abstract and must be overridden
#+END_src

The messages from listing [[lst:app-error-01]] state, that not all of the necessary
methods from the sub-classed {{{verb(QAbstractItemModel)}}} are implemented yet.
Currently the methods {{{verb(columnCount)}}} and {{{verb(rowCount)}}} are
missing. Those methods return ``the number of columns for the children of the
given
parent''[fn:83abdf14c73abab:http://doc.qt.io/qt-5/qabstractitemmodel.html#columnCount]
and ``the number of rows under the given
parent''[fn:76294354838b8f1:http://doc.qt.io/qt-5/qabstractitemmodel.html#rowCount]
respectively. The implementation of those missing methods are as follows in
listing [[lst:app-scenegraph-controller-methods-01]]. The method
{{{verb(columnCount)}}} is trivial, as there will always be only two columns (as
defined by the header in listing [[lst:app-scenegraph]]): The name of the scene and
the number of nodes it contains. The method {{{verb(rowCount)}}} shall return
=1= if the parent is invalid, otherwise it shall return the parent's children.

#+NAME:       app-scenegraph-controller-methods-column-count
#+BEGIN_SRC python :exports none
def columnCount(self, parent):
    """Return the number of columns for the children of the given parent.

    :param parent: The index of the item in the scene graph, which the
                    column count shall be returned for.
    :type  parent: QtCore.QModelIndex

    :return: the number of columns for the children of the given parent.
    :rtype:  int
    """

    return len(self.header_data)
#+END_SRC

#+NAME:       app-scenegraph-controller-methods-row-count
#+BEGIN_SRC python :exports none
def rowCount(self, parent):
    """Return the number of rows for the children of the given parent.

    :param parent: The index of the item in the scene graph, which the
                    row count shall be returned for.
    :type  parent: QtCore.QModelIndex

    :return: the number of rows for the children of the given parent.
    :rtype:  int
    """

    if not parent.isValid():
        return 1

    # Get the actual object stored by the parent. In this case it is a
    # SceneGraphViewModel.
    node = parent.internalPointer()

    return len(node.children())
#+END_SRC

#+NAME:       app-scenegraph-controller-methods
#+HEADER:     :prologue <<app-scenegraph-controller-methods>>
#+BEGIN_SRC python :exports none
<<app-scenegraph-controller-methods-column-count>>

<<app-scenegraph-controller-methods-row-count>>
#+END_SRC

#+CAPTION: The code block =<<app-scenegraph-controller-methods>>=, defining the methods =columnCount= and =rowCount= within the scene controller.
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+NAME:       lst:app-scenegraph-controller-methods-01
#+BEGIN_SRC python :noweb yes

<app-scenegraph-controller-methods>=
    <<app-scenegraph-controller-methods-column-count>>

    <<app-scenegraph-controller-methods-row-count>>
#+END_SRC

When running the application now, there is still an error message, although a
new one as can be seen in listing [[lst:app-error-02]].

#+CAPTION: Output (erroneous) when running the editor application.
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+NAME: lst:app-error-02
#+BEGIN_SRC bash
NotImplementedError: QAbstractItemModel.index() is abstract and must be overridden
#+END_src

This time the {{{verb(index)}}} method is missing in the scene controller.
According the documentation, the method ``returns the index of the item in the
model specified by the given row, column and parent
index.''[fn:14309fdf586d8fa9:http://doc.qt.io/qt-5/qabstractitemmodel.html#index]
Furthermore, ``when reimplementing this function in a subclass, call
createIndex() to generate model indexes that other components can use to refer
to items in your
model.''[fn:c387c6b498f1eca:http://doc.qt.io/qt-5/qabstractitemmodel.html#index]

The implementation of the missing method {{{verb(index)}}} is as follows in
listing [[lst:app-scenegraph-controller-methods-02]]. The method needs to return the
index of the given row and column for the given parent. There are two cases
however: either the parent is valid or it is not. In the former case, the scene
graph view model of the parent is extracted and an index based on the row, the
column and the child node at the given row as parent is being created. In the
latter case, when the given parent is not valid, an index based on the scene
graph's root node is created.

#+NAME:       app-scenegraph-controller-methods-index
#+BEGIN_SRC python :exports none
def index(self, row, column, parent=QtCore.QModelIndex()):
    """Return the index of the item in the model specified by the given row,
    column and parent index.

    :param row: The row for which the index shall be returned.
    :type  row: int
    :param column: The column for which the index shall be returned.
    :type column: int
    :param parent: The parent index of the item in the model. An invalid model
                   index is given as the default parameter.
    :type parent: QtQore.QModelIndex

    :return: the model index based on the given row, column and the parent
             index.
    :rtype: QtCore.QModelIndex
    """

    # If the given parent (index) is not valid, create a new index based on the
    # currently set root node
    if not parent.isValid():
        return self.createIndex(row, column, self.root_node)

    # The internal pointer of the the parent (index) returns a scene graph view
    # model
    parent_node = parent.internalPointer()
    child_nodes = parent_node.children()

    return self.createIndex(row, column, child_nodes[row])
#+END_SRC

#+NAME:       app-scenegraph-controller-methods
#+HEADER:     :prologue <<app-scenegraph-controller-methods>>
#+BEGIN_SRC python :exports none

<<app-scenegraph-controller-methods-index>>
#+END_SRC

#+CAPTION: The code block =<<app-scenegraph-controller-methods>>=, is expanded by the =index= method within the scene controller.
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+NAME:       lst:app-scenegraph-controller-methods-02
#+BEGIN_SRC python :noweb yes
<app-scenegraph-controller-methods>+=
    <<app-scenegraph-controller-methods-index>>
#+END_SRC

Although the scene graph is showing now two columns when running the editor
application, there are still error messages, as shown in listing [[lst:app-error-03]].

#+CAPTION: Output (erroneous) when running the editor application.
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+NAME: lst:app-error-03
#+BEGIN_SRC bash
NotImplementedError: QAbstractItemModel.parent() is abstract and must be overridden
NotImplementedError: QAbstractItemModel.data() is abstract and must be overridden
#+END_SRC

The methods {{{verb(parent)}}} and {{{verb(data)}}} are missing from the
implementation. The Qt documentation states says about {{{verb(parent)}}}:
``Returns the parent of the model item with the given index. If the item has no
parent, an invalid QModelIndex is returned.

A common convention used in models that expose tree data structures is that only
items in the first column have children. For that case, when reimplementing this
function in a subclass the column of the returned QModelIndex would be 0.

When reimplementing this function in a subclass, be careful to avoid calling
QModelIndex member functions, such as QModelIndex::parent(), since indexes
belonging to your model will simply call your implementation, leading to
infinite
recursion.''[fn:3c3bede78fe52b8:http://doc.qt.io/qt-5/qabstractitemmodel.html#parent]

Those remarks lead to the implementation, that can be seen in listing
[[lst:app-scenegraph-controller-methods-03]].

#+NAME:       app-scenegraph-controller-methods-parent
#+BEGIN_SRC python :exports none
def parent(self, model_index):
    """Return the parent of the model item with the given index. If the item has
    no parent, an invalid QModelIndex is returned.

    :param model_index: The model index which the parent model index shall be
                        derived for.
    :type model_index: int

    :return: the model index of the parent model item for the given model index.
    :rtype: QtCore.QModelIndex
    """

    if not model_index.isValid():
        return QtCore.QModelIndex()

    # The internal pointer of the the model index returns a scene graph view
    # model.
    node = model_index.internalPointer()
    if node.parent() is None:
        return QtCore.QModelIndex()
    else:
        return self.createIndex(node.parent().row, 0, node.parent())
#+END_SRC

#+NAME:       app-scenegraph-controller-methods
#+HEADER:     :prologue <<app-scenegraph-controller-methods>>
#+BEGIN_SRC python :exports none

<<app-scenegraph-controller-methods-parent>>
#+END_SRC

#+CAPTION: The code block =<<app-scenegraph-controller-methods>>=, is expanded by the =parent= method within the scene controller.
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+NAME:       lst:app-scenegraph-controller-methods-03
#+BEGIN_SRC python :noweb yes
<app-scenegraph-controller-methods>+=
    <<app-scenegraph-controller-methods-parent>>
#+END_SRC

About the {{{verb(data)}}} method, the Qt documentation says the following:

``Returns the data stored under the given role for the item referred to by the
index.

Note: If you do not have a value to return, return an invalid QVariant instead
of returning
0.''[fn:4e8bc3e102075:http://doc.qt.io/qt-5/qabstractitemmodel.html#data]

The scene graph stores two different kinds of data: the name of the scene and its
nodes. Which of the two gets returned depends on the column. The first column,
column 0, returns the name, where as the second column, column 1, returns the
number of nodes the scene contains. It is not yet possible to implement the
second case, as scenes itself do not exist (as view models) and are not yet
provided as a reference within the scene graph view model.

For still being able to follow the current stream of thought, only a minimalist
realization of the scene view model class {{{verb(SceneViewModel)}}} is provided
by now, as can be seen in listing [[lst:guidomain-scene-sceneviewmodel]].

#+NAME:       guidomain-scene-sceneviewmodel
#+BEGIN_SRC python :exports none
class SceneViewModel(Qt.QObject):
    """View model representing a scene.

    The SceneViewModel corresponds to an SceneGraphViewModel entry within the
    scene graph.
    """

    <<guidomain-scene-sceneviewmodel-signals>>

    <<guidomain-scene-sceneviewmodel-constructor>>

    <<guidomain-scene-sceneviewmodel-methods>>

    <<guidomain-scene-sceneviewmodel-slots>>
#+END_SRC

#+NAME: guidomain-scene-sceneviewmodel-constructor
#+BEGIN_SRC python :exports none
def __init__(self):
    """Constructor."""

    pass
#+END_SRC

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+NAME:       guidomain-scene
#+HEADER:     :prologue <<guidomain-scene>>
#+BEGIN_SRC python :exports none

<<guidomain-scene-sceneviewmodel>>
#+END_SRC

#+NAME:       lst:guidomain-scene-sceneviewmodel
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Expansion of the =scene= module within the =gui_domain= layer by the =SceneViewModel= class. Note, that the implementation of the class is very incomplete at the moment.
#+BEGIN_SRC python :noweb yes

<guidomain-scene>+=
    <<guidomain-scene-sceneviewmodel>>
#+END_SRC

*************** TODO Continue here.

*************** Find out why guidomain-scene is not being expanded

*************** Add a reference of a new scene view model to the scene graph view model on init.

*************** Implement data() in scene graph controller
*************** END



* Work log

- <2017-02-20 Mon> :: Set up and structure the document initially.

- <2017-02-21 Tue> :: Re-structure the document, add first contents of the
     implementation. Add first tries to tangle the code.

- <2017-02-22 Wed> :: Provide further content concerning the implementation:
     Introduce name-spaces/initializers, first steps for a logging facility.

- <2017-02-23 Thu> :: Extend logging facility, provide (unit-) tests.
     Restructure the documentation.

- <2017-02-24 Fri> :: Adapt document to output LaTeX code as desired, change
     styling. Begin development of the applications' main routine.

- <2017-02-27 Mon> :: Remove (unit-) tests from main document and put them into
     appendix instead. Begin explaining literate programming.

- <2017-02-28 Tue> :: Provide a first draft for objectives and limitations.
     Re-structure the document. Correct LaTeX output.

- <2017-03-01 Wed> :: Remove split files, re-add everything to index, add
     objectives.

- <2017-03-02 Thu> :: Set up project schedule. Tangle everything instead of
     doing things manually. Begin changing language to English instead of German.
     Re-add make targets for cleaning and building the source code.

- <2017-03-03 Fri> :: Keep work log up to date. Revise and finish chapter about
     name-spaces and the project structure for now.

- <2017-03-04 Sat> :: Finish translating all already written texts from German
     to English. Describe the main entry point of the application as well as the
     main application itself.

- <2017-03-05 Sun> :: Finish chapter about the main entry point and the main
     application for now, start describing the main window and implement its
     functionality. Keep the work log up to date. Fiddle with references and
     LaTeX export. Find a bug: main_window needs to be attached to a class, by
     using the =self= keyword, otherwise the window does not get shown.
     Introduce new make targets: one to clean Python cache files (*.pyc) and one
     to run the editor application directly.

- <2017-03-06 Mon> :: Update the work log. Add an image of the editor as well as
     the project schedule. Add the implementation of the main window's layout.
     Implement the scene domain model. Move keyPressEvent to its own source
     block instead of expanding the methods of the main window directly. Add a
     section about (the architecture's) layers to the principles section. Add
     Dr. Eric Dubuis as an expert to the involved persons. Introduce the 'verb'
     macro for having nicer verbatim blocks. Use the given image-width for
     inline images in org-mode when available.

-  <2017-03-07 Tue> :: Expand the layering principles by adding a section about
      the model-view-controller pattern and introduce view models. Explain and
      implement the data- and the view model for scene graph items.

-  <2017-03-08 Wed> :: Implement the controller for handling the scene graph.
      Allow the semi-automatic creation of an API documentation by introducing
     Sphinx. Introduce new make targets for creating the API documentation as
     RST and as HTML.

-  <2017-03-10 Fri> :: Implement the scene graph view as widget and integrate it
      into the application. Update the work log.

* Bibliography

\printbibliography{}

* Appendix

** Test cases

Zunächst wird jedoch der entsprechende Unit-Test definiert. Dieser instanziert
die Klasse und stellt sicher, dass sie ordnungsgemäss gestartet werden kann.

Als erster Schritt wird der Header des Test-Modules definiert.

#+NAME: test-app-header
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Header des Test-Modules, =<<test-app-header>>=.
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

"""Module for testing QDE class."""
#+END_SRC

#+RESULTS: fig:test-app-header
: None

Dann werden die benötigen Module importiert. Es sind dies das System-Modul
/sys/ und das Modul /application/, bei welchem es sich um die Applikation
selbst handelt. Das System-Modul /sys/ wird benötigt um der Applikation ggf.
Start-Argumente mitzugeben, also zum Beispiel:

#+NAME: fig:impl-python-call-arguments
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Aufruf des Main-Modules mit zwei Argumenten, =argument1= und =argument2=.
#+BEGIN_SRC bash
python main.py argument1 argument2
#+END_SRC

Der Einfachheit halber werden die Importe in zwei Kategorien unterteilt: Importe
von Pyhton-eigenen Modulen und Importe von selbst verfassten Modulen.

#+NAME: test-app-imports
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Definition der Importe für das Modul zum Testen der Applikation.
#+BEGIN_SRC python
# System imports
<<test-app-system-imports>>

# Project imports
<<test-app-project-imports>>
#+END_SRC

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Importe von Python-eigenen Modulen im Modul zum Testen der Applikation.
#+BEGIN_SRC python
# System imports
import sys
#+END_SRC

#+NAME: test-app-project-imports
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Importe von selbst verfassten Modulen im Modul zum Testen der Applikation.
#+BEGIN_SRC python
# Project imports
from qde.editor.application import application
#+END_SRC

#+RESULTS: test-app-project-imports

Somit kann schliesslich getestet werden, ob die Applikation startet, indem diese
instanziert wird und die gesetzten Namen geprüft werden.

#+NAME: test-app-test-constructor
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION: Methode zum Testen des Konstruktors der Applikation.
#+BEGIN_SRC python
def test_constructor():
    """Test if the QDE application is starting up properly."""
    app = application.QDE(sys.argv)
    assert app.applicationName() == "QDE"
    assert app.applicationDisplayName() == "QDE"
#+END_SRC

#+RESULTS: test-app-test-constructor
: None

Finally, one can merge the above defined elements to an executable test-module,
containing the header, the imports and the test cases (which is in this case
only a test case for testing the constructor).

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION: Modul zum Testen der Applikation.
#+BEGIN_SRC python
<<test-app-header>>

<<test-app-imports>>

<<test-app-test-constructor>>
#+END_SRC

#+RESULTS: test-app-test-cases

Führt man die Testfälle nun aus, schlagen diese erwartungsgemäss fehl, da die
Klasse, und somit die Applikation, als solche noch nicht existiert. Zum jetzigen
Zeitpunkt kann noch nicht einmal das Modul importiert werden, da diese noch
nicht existiert.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION: Aufruf zum Testen des Applkations-Modules.
#+BEGIN_SRC bash
python -m pytest qde/editor/application/test_application.py
#+END_SRC

Um sicherzustellen, dass die Protokollierung wie gewünscht funktioniert, wird
diese durch die entsprechenden Testfälle abgedeckt.

Der einfachste Testfall ist die Standardkonfiguration, also ein Aufruf ohne
Parameter.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Testfall 1 der Protkollierung der Hauptapplikation: Aufruf ohne Argumente.
#+NAME:       test-app-test-logging-default
#+BEGIN_SRC python
def test_setup_logging_without_arguments():
    """Test logging of QDE application without arguments."""
    app = application.QDE(sys.argv)
    root_logger = logging.root
    handlers = root_logger.handlers
    assert len(handlers) == 1
    handler = handlers[0]
#+END_SRC

Da obige Testfälle das /logging/-Module benötigen, muss das Importieren der Module
entsprechend erweitert werden.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Erweiterung des Importes von System-Modulen im Modul zum Testen der Applikation.
#+NAME: test-app-system-imports
#+HEADER: :prologue <<test-app-system-imports>>
#+BEGIN_SRC python
import logging
#+END_SRC

Und der Testfall muss den Testfällen hinzugefügt werden.

#+NAME: test-app-test-cases
#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Hinzufügen des Testfalles 1 zu den bestehenden Testfällen im Modul zum Testen der Applikation.
#+HEADER: :prologue <<test-app-test-cases>>
#+BEGIN_SRC python

<<test-app-test-logging-default>>
#+END_SRC

Auch hierfür werden wiederum zuerst die Testfälle verfasst.

#+ATTR_LaTeX: :options fontsize=\footnotesize,linenos,bgcolor=bashcodebg
#+CAPTION:    Testfälle der Hilfsmethode zur Protokollierung.
#+NAME:       fig:editor-common-logging-test
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

"""Module for testing common methods class."""

# System imports
import logging

# Project imports
from qde.editor.foundation import common


@common.with_logger
class FooClass(object):
    """Dummy class for testing the logging decorator."""

    def __init__(self):
        """Constructor."""
        pass

def test_with_logger():
    """Test if the @with_logger decorator works correctly."""

    foo_instance = FooClass()
    logger = foo_instance.logger
    name = "qde.editor.foundation.test_common.FooClass"
    assert logger is not None
    assert len(logger.handlers) == 1
    handler = logger.handlers[0]
    assert type(handler) == logging.StreamHandler
    assert logger.propagate == False
    assert logger.name == name
#+END_SRC

#+BEGIN_SRC bash
python -m pytest qde/editor/foundation/test_common.py
#+END_SRC


** Meeting minutes

*** Meeting mintutes 2017-02-23

| No.:              | 01                                                                   |
| Date:             | 2017-02-23 13:00 - 13:30                                             |
| Place:            | Cafeteria, Main building, Berne University of applied sciences, Biel |
| Involved persons: | Prof. Claude Fuhrer (CF)                                             |
|                   | Sven Osterwalder (SO)                                                |

Kick-off meeting for the thesis.

**** Presentation and discussion of the current state of work

- Presentation of the workflow. Emacs and Org-Mode is used to write the
  documentation as well as the actual code. (SO)
  - This is a very interesting approach. The question remains if the effort of
    this method does not prevail the method of developing the application and
    the documentation in parallel. It is important to reach a certain state of
    the application. Also the report should not exceed around 80 pages. (CF)
    - A decision about the used method is made until the end of this week. (SO)
- The code will unit-tested using py.test and / or hypothesis. (SO)
- Presentation of the structure of the documentation. It follows the schematics
  of the preceding documentations. (SO)

**** Further steps / proceedings

- The expert of the thesis, Mr. Dubuis, puts mainly emphasis on the
  documentation. The code of the thesis is respected too, but is clearly not the
  main aspect. (CF)
- Mr. Dubuis also puts emphasis on code metrics. Therefore the code needs to be
  (automatically) tested and a coverage of at least 60 to 70 percent must be
  reached. (CF)
- A meeting with Mr. Dubuis shall be scheduled at the end of March or beginning
  of April 2017. (CF)
- The administrative aspects as well as the scope should be written until end of
  March 2017 for being able to present them to Mr. Dubuis. (CF)
- Mr. Dubuis should be asked if the publicly available access to the whole
  thesis is enough or if he wishes to receive the particular status right before
  the meetings. (CF)
- Regularly meetings will be held, but the frequency is to be defined yet.
  Further information follows per e-mail. (CF)
- At the beginning of the studies, a workplace at the Berne University of
  applied sciences in Biel was offered. Is this possibility still available?
  (SO)
  - Yes, that possibility is still available and details will be clarified and
    follow per e-mail. (CF)

**** To do for the next meeting

***** DONE Create GitHub repository for the thesis. (SO)
      CLOSED: [2017-03-01 Wed 08:45]

****** DONE Inform Mr. Fuhrer about the creation of the repository. (SO)
       CLOSED: [2017-03-01 Wed 08:46]

***** DONE Ask Mr. Dubuis by mail how he wants to receive the documentation. (SO)
      CLOSED: [2017-03-01 Wed 08:46]

****** TODO Await answer of Mr. Dubuis (ED)

***** DONE Set up appointments with Mr. Dubuis (CF)
      CLOSED: [2017-02-27 Tue 15:21]

****** TODO Await answer of Mr. Dubuis (ED)

***** DONE Clarify possibility of a workplace at Berne University of applied sciences in Biel. (CF)
      CLOSED: [2017-02-24 Fri 07:49]

****** A workplace was found at the RISIS laboratory and may be used instantly. (CF)

***** DONE Decide about the method used for developing this thesis. (SO)
      CLOSED: [2017-02-24 Fri 16:29]

****** After discussions with a colleague the method of literate programming is
       kept. The documentation containing the literate program will although be
       attached as appendix as it most likely will exceed 80 pages. Instead the
       method will be introduced in the report and the report will be endowed
       with examples from the literate program.

***** TODO Describe procedure and set up a time schedule including milestones. (SO)
      DEADLINE: <2017-03-31 Fri>

**** Scheduling of the next meeting

- To be defined

* Glossary

- animation :: An animation is a composition of scenes. Each animation is
               defined by a time span, meaning it has a defined start- and
               end-time. As the name indicates, an animation contains animated
               elements, being properties of nodes (e.g. the position of a node
               and so on).
